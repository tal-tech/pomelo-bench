// Code generated by goctl. DO NOT EDIT.
// Source: bench.proto

package benchclient

import (
	"context"

	"pomelo_bench/pb/bench"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClearStatisticsRequest  = bench.ClearStatisticsRequest
	ClearStatisticsResponse = bench.ClearStatisticsResponse
	ClosePlanRequest        = bench.ClosePlanRequest
	ClosePlanResponse       = bench.ClosePlanResponse
	Connector               = bench.Connector
	ConnectorLog            = bench.ConnectorLog
	ConnectorStatus         = bench.ConnectorStatus
	CustomMessagePool       = bench.CustomMessagePool
	CustomSendRequest       = bench.CustomSendRequest
	CustomSendResponse      = bench.CustomSendResponse
	DetailPlanRequest       = bench.DetailPlanRequest
	DetailPlanResponse      = bench.DetailPlanResponse
	ListPlanRequest         = bench.ListPlanRequest
	ListPlanResponse        = bench.ListPlanResponse
	Metrics                 = bench.Metrics
	Plan                    = bench.Plan
	PlanDetail              = bench.PlanDetail
	PlanMonitor             = bench.PlanMonitor
	PomeloConnector         = bench.PomeloConnector
	SendChatRequest         = bench.SendChatRequest
	SendChatResponse        = bench.SendChatResponse
	StartPlanRequest        = bench.StartPlanRequest
	StartPlanResponse       = bench.StartPlanResponse
	Statistics              = bench.Statistics

	Bench interface {
		// StartPlan 启动压测
		StartPlan(ctx context.Context, in *StartPlanRequest, opts ...grpc.CallOption) (*StartPlanResponse, error)
		// SendChat 发送消息
		SendChat(ctx context.Context, in *SendChatRequest, opts ...grpc.CallOption) (*SendChatResponse, error)
		// CustomSend 自定义消息发送
		CustomSend(ctx context.Context, in *CustomSendRequest, opts ...grpc.CallOption) (*CustomSendResponse, error)
		// ClearStatistics 清理任务指标
		ClearStatistics(ctx context.Context, in *ClearStatisticsRequest, opts ...grpc.CallOption) (*ClearStatisticsResponse, error)
		// ClosePlan 清理任务
		ClosePlan(ctx context.Context, in *ClosePlanRequest, opts ...grpc.CallOption) (*ClosePlanResponse, error)
		// ListPlan 查询压测计划
		ListPlan(ctx context.Context, in *ListPlanRequest, opts ...grpc.CallOption) (*ListPlanResponse, error)
		// DetailPlan 查询压测计划详情
		DetailPlan(ctx context.Context, in *DetailPlanRequest, opts ...grpc.CallOption) (*DetailPlanResponse, error)
	}

	defaultBench struct {
		cli zrpc.Client
	}
)

func NewBench(cli zrpc.Client) Bench {
	return &defaultBench{
		cli: cli,
	}
}

// StartPlan 启动压测
func (m *defaultBench) StartPlan(ctx context.Context, in *StartPlanRequest, opts ...grpc.CallOption) (*StartPlanResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.StartPlan(ctx, in, opts...)
}

// SendChat 发送消息
func (m *defaultBench) SendChat(ctx context.Context, in *SendChatRequest, opts ...grpc.CallOption) (*SendChatResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.SendChat(ctx, in, opts...)
}

// CustomSend 自定义消息发送
func (m *defaultBench) CustomSend(ctx context.Context, in *CustomSendRequest, opts ...grpc.CallOption) (*CustomSendResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.CustomSend(ctx, in, opts...)
}

// ClearStatistics 清理任务指标
func (m *defaultBench) ClearStatistics(ctx context.Context, in *ClearStatisticsRequest, opts ...grpc.CallOption) (*ClearStatisticsResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.ClearStatistics(ctx, in, opts...)
}

// ClosePlan 清理任务
func (m *defaultBench) ClosePlan(ctx context.Context, in *ClosePlanRequest, opts ...grpc.CallOption) (*ClosePlanResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.ClosePlan(ctx, in, opts...)
}

// ListPlan 查询压测计划
func (m *defaultBench) ListPlan(ctx context.Context, in *ListPlanRequest, opts ...grpc.CallOption) (*ListPlanResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.ListPlan(ctx, in, opts...)
}

// DetailPlan 查询压测计划详情
func (m *defaultBench) DetailPlan(ctx context.Context, in *DetailPlanRequest, opts ...grpc.CallOption) (*DetailPlanResponse, error) {
	client := bench.NewBenchClient(m.cli.Conn())
	return client.DetailPlan(ctx, in, opts...)
}
